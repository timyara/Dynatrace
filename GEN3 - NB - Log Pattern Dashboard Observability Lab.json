{"version":15,"variables":[{"key":"Buckets","type":"query","visible":true,"input":"fetch dt.system.buckets\n| filter dt.system.table==\"logs\"\n| fields name\n| sort name","multiple":true,"defaultValue":["default_logs"]},{"key":"Namespace","type":"query","visible":true,"input":"data record(entity.name=\"Non-Kubernetes\")\n| append [fetch dt.entity.cloud_application_namespace\n| fields entity.name\n| sort entity.name]","multiple":true,"defaultValue":["default"]},{"key":"Status","type":"csv","input":"NONE,INFO,WARN,ERROR","multiple":true,"defaultValue":["ERROR"],"visible":true},{"key":"Sampling","type":"csv","input":"10000,1000,100,10,1","multiple":false,"defaultValue":"100","visible":true},{"key":"ContentSearch","type":"text","visible":true}],"tiles":{"0":{"type":"data","title":"Log Pattern Examples","query":"fetch logs, samplingRatio:toLong($Sampling)\n| filter in(dt.system.bucket, $Buckets)\n| filter (isNull(k8s.namespace.name) and in(\"Non-Kubernetes\",array($Namespace)) or in(k8s.namespace.name, array($Namespace))) and in(status, array($Status)) and contains(content, $ContentSearch)\n| filterOut contains(content, \"Failed to export to Stackdriver\")\n| parse content, \"DATA* JSON:json\"\n| fieldsAdd pattern=coalesce(message,msg,json[message],json[msg],content)\n| fieldsAdd pattern=replacePattern(replacePattern(replacePattern(replacePattern(replacePattern(replacePattern(replacePattern(replacePattern(replacePattern(replacePattern(pattern, \"UUIDSTRING\", \"UUID\"), \"(ISO8601|HTTPDATE|JSONTIMESTAMP|TIMESTAMP|TIME)\", \"TIME\"),\"IPADDR\", \"IP\"), \"'-' ALNUM{10} '-' ALNUM{5}\", \"-PODID\"), \"XDIGIT{5,}\", \"*\"), \"DIGIT\", \"*\"), \"' /' NSPACE*\", \" /URLPATH\"), \"'://' [^/ ] '/'? NSPACE*\", \"://URL\"), \"'[!dt' LD ']'\", \"\"), \"SPACE+\", \" \")\n| summarize {Count=count() * toLong($Sampling), example=takeFirst(record(timestamp, content, trace_id, span_id, dt.entity.cloud_application_instance, dt.entity.process_group_instance, dt.entity.process_group, dt.entity.service))}, by: {pattern, status}\n| fieldsAdd severity = if(status==\"ERROR\", 0, else: if(status==\"WARN\", 1, else:if(status==\"NONE\", 2, else: 3)))\n| fields Count, Status=status, Pattern=pattern, Example=example[content], trace_id=example[trace_id], timestamp=example[timestamp], span_id=example[span_id], dt.entity.service=example[dt.entity.service], dt.entity.cloud_application_instance=example[dt.entity.cloud_application_instance],dt.entity.process_group_instance=example[dt.entity.process_group_instance], dt.entity.process_group=arrayFirst(toArray(example[dt.entity.process_group])), severity\n| sort severity asc, Count desc\n| limit 100\n//Add Service on best-effort basis\n| fieldsAdd dt.entity.service=coalesce(dt.entity.service, arrayFirst(toArray(entityAttr(dt.entity.process_group, \"runs\")[dt.entity.service])))\n","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"table","visualizationSettings":{"thresholds":[{"id":1,"field":"Status","title":"","isEnabled":true,"rules":[{"id":0,"color":{"Default":"var(--dt-colors-charts-categorical-color-12-default, #cd3741)"},"comparator":"=","label":"","value":"ERROR"},{"id":1,"color":{"Default":"var(--dt-colors-charts-status-warning-default, #eca440)"},"comparator":"=","label":"","value":"WARN"},{"id":2,"color":{"Default":"var(--dt-colors-charts-categorical-color-01-default, #134fc9)"},"comparator":"=","label":"","value":"INFO"},{"id":3,"color":{"Default":"var(--dt-colors-charts-categorical-color-04-default, #d85a9f)"},"comparator":"=","label":"","value":"NONE"}]}],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"categoricalBarChartSettings":{"categoryAxis":"Status","valueAxis":"Count","categoryAxisLabel":"Status","valueAxisLabel":"Count"},"fieldMapping":{"timestamp":"timestamp","leftAxisValues":["Count"],"leftAxisDimensions":["Status"]},"hiddenLegendFields":[]},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","recordField":"timestamp","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[["trace_id"],["timestamp"],["spam_id"],["dt.entity.cloud_application_instance"],["span_id"],["dt.entity.process_group"],["severity"],["dt.entity.process_group_instance"],["dt.entity.service"]],"lineWrapIds":[["pattern"],["count()"],["example"],["content"],["Content"],["Pattern"],["Example"]],"columnWidths":{"[\"pattern\"]":905,"[\"example\"]":1736,"[\"Pattern\"]":836},"sortBy":{"columnId":"[\"count()\"]","direction":"descending"},"colorThresholdTarget":"background"},"honeycomb":{"shape":"hexagon","legend":"auto","dataMappings":{"value":"Count"},"displayedFields":["Status"],"colorMode":"color-palette","colorPalette":"blue"},"histogram":{"dataMappings":[{"valueAxis":"Count","rangeAxis":""},{"valueAxis":"severity","rangeAxis":""}]}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":50,"maxResultMegaBytes":20,"defaultSamplingRatio":10,"enableSampling":false}},"2":{"type":"data","title":"Log Patterns over Time","query":"fetch logs, samplingRatio:toLong($Sampling)\n| filter in(dt.system.bucket, $Buckets)\n| filter (isNull(k8s.namespace.name) and in(\"Non-Kubernetes\",array($Namespace)) or in(k8s.namespace.name, array($Namespace))) and in(status, array($Status)) and contains(content, $ContentSearch)\n| filterOut contains(content, \"Failed to export to Stackdriver\")\n| parse content, \"DATA* JSON:json\"\n| fieldsAdd pattern=coalesce(message,msg,json[message],json[msg],content)\n| fieldsAdd pattern=replacePattern(replacePattern(replacePattern(replacePattern(replacePattern(replacePattern(replacePattern(replacePattern(replacePattern(replacePattern(pattern, \"UUIDSTRING\", \"UUID\"), \"(ISO8601|HTTPDATE|JSONTIMESTAMP|TIMESTAMP|TIME)\", \"TIME\"),\"IPADDR\", \"IP\"), \"'-' ALNUM{10} '-' ALNUM{5}\", \"-PODID\"), \"XDIGIT{5,}\", \"*\"), \"DIGIT\", \"*\"), \"' /' NSPACE*\", \" /URLPATH\"), \"'://' [^/ ] '/'? NSPACE*\", \"://URL\"), \"'[!dt' LD ']'\", \"\"), \"SPACE+\", \" \")\n| maketimeseries {count=count(default:0)}, by: {pattern,status}, bins:60\n| fieldsAdd count=count[] * toLong($Sampling)\n| sort arraySum(count) desc\n| limit 15","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"areaChart","visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"categoricalBarChartSettings":{"categoryAxis":"pattern","valueAxis":"interval","categoryAxisLabel":"pattern","valueAxisLabel":"interval"},"fieldMapping":{"timestamp":"timeframe","leftAxisValues":["count"],"leftAxisDimensions":["pattern","status"]},"colorPalette":"log-level","hiddenLegendFields":["dt.entity.process_group","dt.entity.cloud_application","dt.entity.process_group_instance"]},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","recordField":"timestamp","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":true,"hiddenColumns":[["timeframe"],["interval"]],"lineWrapIds":[["timeframe"],["interval"],["pattern"],["count"]],"columnWidths":{"[\"pattern\"]":1504,"[\"example\"]":1736},"sortBy":{"columnId":"[\"count()\"]","direction":"descending"}},"honeycomb":{"shape":"hexagon","legend":"auto","dataMappings":{"value":"interval"},"displayedFields":["pattern"],"colorMode":"color-palette","colorPalette":"blue"},"histogram":{"dataMappings":[{"valueAxis":"interval","rangeAxis":""}]}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":50,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}},"3":{"type":"markdown","title":"","content":"# Log Pattern Dashboard from Observability Lab\nThis dashboard automatically identifies common patterns of logs by using capabilities of DQL (Dynatrace Query Language) such as pattern, replacePattern and others.\n\nThe variables on the top allow you to filter on \n* **buckets**: specify which data set you query\n* **namespaces**: select those namespaces your are responsible for\n* **status**: focus on info, error or severe \n* **sampling**: e.g: only analyze every 100th log\n\n**To test this dashboard on the Playground Tenant please use the following settings:** all buckets, all namespaces, all statuses, sampling==100\n\nIf you have feedback please send it to [devrel@dynatrace.com](mailto:devrel@dynatrace.com?subject=Feedback%20Log%20Pattern%20Dashboard)\n\nSpecial Thanks to Thomas Brandl for creating this dashboard"}},"layouts":{"0":{"x":0,"y":13,"w":24,"h":14},"2":{"x":0,"y":6,"w":24,"h":7},"3":{"x":0,"y":0,"w":24,"h":6}},"importedWithCode":false}