{"version":"5","defaultTimeframe":{"from":"now-2h","to":"now"},"sections":[{"id":"f93100de-a72a-462f-8517-633035eade34","type":"markdown","markdown":"## This is a Notebook for Solution Engineers to clone for SRG, Workflow, SLO DEMO flow\n- Owner: Tim Yara v1, June 17th, 2024\n"},{"id":"2596fd19-c61e-4c17-b026-1a15ce2fc220","type":"markdown","markdown":"# Section One: Site Reliability Guardian's"},{"id":"3c1b048d-e7ca-437b-b6f3-b6b0ee376fa9","type":"markdown","markdown":"# [Site Reliability Guardian](https://www.dynatrace.com/hub/detail/site-reliability-guardian/) \n- [SRG Document - Getting Started](https://docs.dynatrace.com/docs/shortlink/srg-landing)\n- [EXTERNAL: Customer-Prospect Playground tenant: wkf10640 - SRGs](https://wkf10640.apps.dynatrace.com/ui/apps/dynatrace.site.reliability.guardian/)\n- [INTERNAL: Dynatrace Demo Tenant - SRGs](https://guu84124.apps.dynatrace.com/ui/apps/dynatrace.site.reliability.guardian/)\n\n## Overview\nThe Site Reliability Guardian provides an automated change impact analysis to validate service availability, performance, and capacity objectives across various systems. This enables DevOps platform engineers to make the right release decisions for new versions and empowers SREs to apply Service-Level Objectives (SLOs) for their critical services.\n\n## Use cases\n1. DevOps can automate safe and secure releases by applying a gating mechanism that identifies release issues quickly and prevents poor-quality code from being promoted to production.\n2. SREs can leverage on-demand reliability validation by comparing observability data such as service-level objectives against a dedicated release version from the past, or as part of progressive delivery\n\n\n### Questions that can be asked. \n    - Has a change that's been triggered by a CI/CD pipeline impacted any Services (SmartScape dependencies)?  \n\t- Should we release or not to release? \n    - Is a change impacting any of my services? Which ones? How many? \n\n## How to call SRGs from your pipeline (CI/CD) triggers? (Gitlab, Github, Azure DevOps, Jenkins)\n- Pre-Requisite\n  -   [How to with Dynatrace](https://www.youtube.com/playlist?list=PLqt2rd0eew1aXP1iwG2Q8iKEzyjOSQmp2)\n  -   Dynatrace Automation Tools Github for SRG: [SRGAutomation.md](https://github.com/Dynatrace/dynatrace-automation-tools/blob/main/docs/Site-Reliability-Guardian/SRGAutomation.md)\n"},{"id":"ffcac96a-74ad-41f3-b38a-e1a06c86bb7e","type":"markdown","markdown":"# SRG Hands on Section:\n\n1. Create a guardian\n- In Dynatrace from menu on the left, select Apps -> Site Reliability Guardian.\n- On the All Guardians overview page, select + Guardian.\n- Click on create without template. A new guardian is displayed in the editor.\n- Provide a name for the guardian: my-first-guardian\n- Add the following objective example by defining the name, a DQL, and specifying a target as well as a warning threshold.\n  - Objective name: Error rate\n  - Description: The error rate objective derives the number of error logs in ratio to the total number of log lines. The target is set to be less than 2% with a warning indicator at 1.5% of error logs.\n  -  DQL to calculate error rate\n  ```\n  fetch logs\n    | fieldsAdd errors = toLong(loglevel == \"ERROR\")\n    | summarize errorRate = sum(errors)/count() * 100\n    ``` \n\n    - Click on run query, select the last 1 hour to previw results of your current error rate.\n\nSet thresholds for this objective:\n  - Select Lower than the these numbers is good\n  - Failure: 1\n  - Warning: 0.4\n\n- Click on Create to create the guardian.\n- Click on Validate to perform a manual validation of the objective."},{"id":"f6a2c7f9-2d5b-49bb-80f3-ca0269da24cb","type":"dql","title":"SRG Query Example: Error Rate by log.source","showTitle":false,"drilldownPath":[],"height":168,"state":{"input":{"value":"//Example for Error rates by log.source \nfetch logs\n  | fieldsAdd errors = toLong(loglevel == \"ERROR\")\n  | summarize errorRate = sum(errors)/count() * 100","timeframe":{"from":"now-2h","to":"now"}},"visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"categoricalBarChartSettings":{}},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","recordField":"errorRate","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"firstVisibleRowIndex":0,"columnWidths":{}},"honeycomb":{"shape":"hexagon","legend":"auto","dataMappings":{}},"histogram":{"dataMappings":[{"valueAxis":"errorRate","rangeAxis":""}]}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"visualization":"table","state":"success","result":{"code":200,"notifications":[],"dateTime":"2024-07-10T13:31:05.513Z","input":{"value":"//Example for Error rates by log.source \nfetch logs\n  | fieldsAdd errors = toLong(loglevel == \"ERROR\")\n  | summarize errorRate = sum(errors)/count() * 100","timeframe":{"from":"now-2h","to":"now"}},"value":{"records":[{"errorRate":0.6349483562797187}],"metadata":{"grail":{"canonicalQuery":"fetch logs\n| fieldsAdd errors = toLong(loglevel == \"ERROR\")\n| summarize errorRate = sum(errors) / count() * 100","timezone":"America/Chicago","query":"//Example for Error rates by log.source \nfetch logs\n  | fieldsAdd errors = toLong(loglevel == \"ERROR\")\n  | summarize errorRate = sum(errors)/count() * 100","scannedRecords":20687313,"dqlVersion":"V1_0","scannedBytes":25295258430,"scannedDataPoints":0,"analysisTimeframe":{"start":"2024-07-10T11:31:00.975Z","end":"2024-07-10T13:31:00.975Z"},"locale":"und","executionTimeMilliseconds":3484,"notifications":[],"queryId":"c803fcf9-6375-4590-a7a0-ca62cff519d8","sampled":false}},"types":[{"mappings":{"errorRate":{"type":"double"}},"indexRange":[0,0]}]},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}}}},{"id":"0467cc9e-0e3a-45fb-b90d-4fe44faa1ce4","type":"dql","title":"SRG Query Example: Failure Rate by Log.source","showTitle":false,"drilldownPath":[],"height":93,"state":{"input":{"value":"//Example for Failure rates by log.source \nfetch logs //, scanLimitGBytes: 500, samplingRatio: 1000\n| filter (matchesValue(log.source, \"/var/lib/docker/containers/028c4ea1277f86f447dd45e2e0afee98e5f9542b11776b7ac4875705968101f9/028c4ea1277f86f447dd45e2e0afee98e5f9542b11776b7ac4875705968101f9-json.log\") or matchesValue(log.source, \"Container Output\") or matchesValue(log.source, \"/var/log/syslog\"))\n| parse content, \"JSON:request\"\n|  fieldsAdd httpStatus = request[httpRequest][status]\n|  fieldsAdd failure = toLong(httpStatus >= 400 AND httpStatus < 500)\n|  summarize failureRate = sum(failure)/count() * 100","timeframe":{"from":"now-2h","to":"now"}},"visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{}},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","recordField":"failureRate","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"firstVisibleRowIndex":0,"columnWidths":{}},"honeycomb":{"shape":"hexagon","legend":"auto"},"histogram":{"dataMappings":[{"valueAxis":"failureRate","rangeAxis":""}]}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"visualization":"table","state":"success","result":{"code":200,"notifications":[],"dateTime":"2024-06-26T13:19:08.786Z","input":{"value":"//Example for Failure rates by log.source \nfetch logs //, scanLimitGBytes: 500, samplingRatio: 1000\n| filter (matchesValue(log.source, \"/var/lib/docker/containers/028c4ea1277f86f447dd45e2e0afee98e5f9542b11776b7ac4875705968101f9/028c4ea1277f86f447dd45e2e0afee98e5f9542b11776b7ac4875705968101f9-json.log\") or matchesValue(log.source, \"Container Output\") or matchesValue(log.source, \"/var/log/syslog\"))\n| parse content, \"JSON:request\"\n|  fieldsAdd httpStatus = request[httpRequest][status]\n|  fieldsAdd failure = toLong(httpStatus >= 400 AND httpStatus < 500)\n|  summarize failureRate = sum(failure)/count() * 100","timeframe":{"from":"now-2h","to":"now"}},"value":{"records":[{"failureRate":0}],"metadata":{"grail":{"canonicalQuery":"fetch logs\n| filter matchesValue(log.source, \"/var/lib/docker/containers/028c4ea1277f86f447dd45e2e0afee98e5f9542b11776b7ac4875705968101f9/028c4ea1277f86f447dd45e2e0afee98e5f9542b11776b7ac4875705968101f9-json.log\") OR matchesValue(log.source, \"Container Output\") OR matchesValue(log.source, \"/var/log/syslog\")\n| parse content, \"JSON:request\"\n| fieldsAdd httpStatus = request[httpRequest][status]\n| fieldsAdd failure = toLong(httpStatus >= 400 AND httpStatus < 500)\n| summarize failureRate = sum(failure) / count() * 100","timezone":"America/Chicago","query":"//Example for Failure rates by log.source \nfetch logs //, scanLimitGBytes: 500, samplingRatio: 1000\n| filter (matchesValue(log.source, \"/var/lib/docker/containers/028c4ea1277f86f447dd45e2e0afee98e5f9542b11776b7ac4875705968101f9/028c4ea1277f86f447dd45e2e0afee98e5f9542b11776b7ac4875705968101f9-json.log\") or matchesValue(log.source, \"Container Output\") or matchesValue(log.source, \"/var/log/syslog\"))\n| parse content, \"JSON:request\"\n|  fieldsAdd httpStatus = request[httpRequest][status]\n|  fieldsAdd failure = toLong(httpStatus >= 400 AND httpStatus < 500)\n|  summarize failureRate = sum(failure)/count() * 100","scannedRecords":18656105,"dqlVersion":"V1_0","scannedBytes":19977133534,"scannedDataPoints":0,"analysisTimeframe":{"start":"2024-06-26T11:19:04.316Z","end":"2024-06-26T13:19:04.316Z"},"locale":"und","executionTimeMilliseconds":4031,"notifications":[],"queryId":"2e36df5d-ee90-4bd4-9040-4c0f2ae25b4b","sampled":false}},"types":[{"mappings":{"failureRate":{"type":"double"}},"indexRange":[0,0]}]}}}},{"id":"e3975db9-e46d-49ef-8565-20f384f9696b","type":"markdown","markdown":"# Section Two: Workflows"},{"id":"3ee95f27-1c21-4b72-b86e-bc0ca838459d","type":"markdown","markdown":"# [Workflow Overview](https://www.dynatrace.com/hub/detail/automations/)\n- [Workflow Document - Getting Started](https://docs.dynatrace.com/docs/shortlink/workflows)\n- [EXTERNAL: Customer-Prospect Playground tenant: wkf10640 - Workflows](https://wkf10640.apps.dynatrace.com/ui/apps/dynatrace.automations/workflows)\n- [INTERNAL: Dynatrace Demo Tenant - Workflows](https://guu84124.apps.dynatrace.com/ui/apps/dynatrace.automations/workflows)\n\n\n## Overview\nWorkflows is one of the built-in apps shipped with Dynatrace. A series of actions are assembled to build processes in a graphical representation. Those workflows can automatically be triggered by events in Dynatrace, either on a schedule or manually.\n\nThis is intended for users, who:\n\n- Want to automatically act on the data gathered and answers provided by Dynatrace.\n- Want to orchestrate processes and connect various applications.\n- Design and implement IT processes.\n\n## Use cases\nWorkflows allows you to:\n\n- Automatically react to Davis events or security problems.\n- Schedule reports, in line with holidays and work hours.\n- Orchestrate IT processes across your entire IT landscape.\n- Connect to both cloud and locally-gated services.\n- Combine out-of-the-box integrations with custom code.\n- Visualize automated processes in a graphical workflow interface.\n- Get live monitoring and a full audit trail of any automation execution.\n- Define flow logic with custom conditions, automatic retries, loops, and parallel processing."},{"id":"98955df6-fe5e-4a9f-8f6d-9366c84778db","type":"markdown","markdown":"# Workflows Hands on Section\n\nTasks to complete this step\n1. Sign in to Dynatrace (demo.live, Playground, or actual customer tenant) \n2. In the Dynatrace Launcher, select Workflows.\n3. Select Add New workflow to create your first workflow. The Workflow editor opens.\n4. Select the workflow title (\"Untitled Workflow\") and customize the name e.g. \"Guardian Check\".\n5. In the Choose trigger section, select the Time interval trigger.\n  - Set the Run every (min) parameter to 10 minutes and Rule parameter to everyday\n\n6. To add the first task, select + on the trigger node of the workflow graph.\n\n7. In the Choose action section, which lists all available actions for tasks, select \"Site Reliability Guardian\". The workflow now has its first task and shows the input configuration for that task on the right.\n  - For the Guardian, select \"my-first-guardian\"\n  - For the timeframe, select \"Last 1 Hour\"\n\n8. From the left menu click on save to save the workflow image\n9. Select Run to execute the workflow."},{"id":"e51c97ac-356e-4841-a628-fff9fc0895e9","type":"markdown","markdown":"# SLOs (Optional)\n- [SLO Documentation](https://docs.dynatrace.com/docs/platform-modules/automations/service-level-objectives)\n  -   Assumption - SLOs have been created already for a few key Services \n\n- [Service-level objectives](https://guu84124.apps.dynatrace.com/ui/apps/dynatrace.classic.slo/ui/slo?gtf=-2h&gf=all)\n  - \"Carts Service\" \n    * [Carts - Availability SLO](https://guu84124.apps.dynatrace.com/ui/apps/dynatrace.site.reliability.guardian/guardian/edit/vu9U3hXa3q0AAAABADFhcHA6ZHluYXRyYWNlLnNpdGUucmVsaWFiaWxpdHkuZ3VhcmRpYW46Z3VhcmRpYW5zAAZ0ZW5hbnQABnRlbmFudAAkYjY0NWI2ODktNDYzZS0zNmYyLTllMzgtNzg4OTgxODRiOGNhvu9U3hXa3q0?redirectTo=%2Fanalysis%2Fvu9U3hXa3q0AAAABADFhcHA6ZHluYXRyYWNlLnNpdGUucmVsaWFiaWxpdHkuZ3VhcmRpYW46Z3VhcmRpYW5zAAZ0ZW5hbnQABnRlbmFudAAkYjY0NWI2ODktNDYzZS0zNmYyLTllMzgtNzg4OTgxODRiOGNhvu9U3hXa3q0%3FvalidationId%3D7c0756ab-2ed7-4525-bf6c-70fb68c102c8&selectedObjective=Availability+SLO)"},{"id":"5576bd08-d93f-489b-a8e6-f8ea16a57acd","type":"dql","title":"Error rate","showTitle":true,"showInput":true,"drilldownPath":[],"state":{"input":{"value":"fetch logs | fieldsAdd errors = toLong(loglevel == $logLevel) | summarize errorRate = sum(errors)/count() * 100","timeframe":{"from":"2024-06-25T23:00:41.605Z","to":"2024-06-26T00:00:41.605Z"}},"visualizationSettings":{"singleValue":{"recordField":"error"},"histogram":{"dataMappings":[]}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"state":"error","result":{"value":{"error":{"message":"PARSE_ERROR","details":{"exceptionType":"DQL-ERROR-PARSING","syntaxErrorPosition":{"start":{"column":52,"index":51,"line":1},"end":{"column":52,"index":51,"line":1}},"errorType":"PARSE_ERROR","errorMessage":"$ isn't allowed here. Please check the autocomplete suggestions before the error for alternative options.","arguments":["$"],"queryString":"fetch logs | fieldsAdd errors = toLong(loglevel == $logLevel) | summarize errorRate = sum(errors)/count() * 100","errorMessageFormatSpecifierTypes":["INPUT_QUERY_PART"],"errorMessageFormat":"%1$s isn't allowed here. Please check the autocomplete suggestions before the error for alternative options.","queryId":"dd491250-4f8b-4b27-92a6-5ab390a8be0f"},"code":400}},"code":400,"error":"$ isn't allowed here. Please check the autocomplete suggestions before the error for alternative options.","notifications":[],"dateTime":"2024-06-26T15:19:41.373Z","input":{"value":"fetch logs | fieldsAdd errors = toLong(loglevel == $logLevel) | summarize errorRate = sum(errors)/count() * 100","timeframe":{"from":"2024-06-25T23:00:41.605Z","to":"2024-06-26T00:00:41.605Z"}}},"visualization":"recordView"}}]}