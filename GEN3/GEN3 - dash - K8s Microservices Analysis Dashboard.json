{"version":14,"variables":[{"key":"K8sNamespace","type":"query","input":"\nfetch dt.entity.cloud_application_namespace\n| filter matchesPhrase(contains[dt.entity.service], \"SERVICE\")\n| fields entity.name\n| filterOut entity.name == \"dynatrace\"\n| summarize distinctTags = collectDistinct(entity.name)\n| fields distinctTags = arraySort(distinctTags, direction: \"ascending\")","multiple":false,"defaultValue":"dynatrace"},{"key":"Service","type":"query","input":"fetch dt.entity.service\n| filter isNotNull(belongs_to[dt.entity.cloud_application_namespace])\n| fields id, entity.name, dt.entity.cloud_application_namespace = belongs_to[dt.entity.cloud_application_namespace]\n| expand dt.entity.cloud_application_namespace\n| fields service = entity.name, \n         namespace = entityName(dt.entity.cloud_application_namespace)\n| filter in(namespace, $K8sNamespace)\n| filterOut matchesPhrase(service, \"background threads\") or\n            matchesPhrase(service, \"Health\")\n| sort service asc\n| summarize distinctServices = collectDistinct(service)\n| fields distinctServices = arraySort(distinctServices, direction: \"ascending\")\n| fields values = arrayRemoveNulls(array(\"ALL\", distinctServices))\n","multiple":false,"defaultValue":"ALL"},{"key":"Request","type":"query","input":"fetch spans\n| filter request.is_root_span == TRUE\n| filter isNotNull(k8s.namespace.name)\n| filter in(k8s.namespace.name, $K8sNamespace)\n| filter in($Service, \"ALL\") OR in(entityName(dt.entity.service), $Service)\n| filterOut matchesPhrase(entityName(dt.entity.service), \"background threads\") or\n            matchesPhrase(entityName(dt.entity.service), \"Health\")\n| fields endpoint.name\n| summarize distinctRequests = collectDistinct(endpoint.name)\n| fields distinctRequests = arraySort(distinctRequests, direction: \"ascending\")\n| fields values = arrayRemoveNulls(array(\"ALL\", distinctRequests))\n","multiple":false,"defaultValue":"ALL"},{"key":"AnalysisType","type":"csv","input":"ALL,Failed,SlowRequest,Exception,HTTP4xx,HTTP5xx","multiple":false,"defaultValue":"ALL"},{"key":"SlowRequestTheshold","type":"csv","input":"ALL,5s,10s,15s,30s,45s,1m,5m,30m,1hr","multiple":false,"defaultValue":"5s"}],"tiles":{"10":{"type":"data","title":"Requests  --> Analysis Type = $AnalysisType","query":"fetch spans\n| filter request.is_root_span == TRUE\n| filter isNotNull(k8s.namespace.name)\n| filter in(k8s.namespace.name, $K8sNamespace)\n| filter in($Service, \"ALL\") OR in(entityName(dt.entity.service), $Service)\n| filterOut matchesPhrase(entityName(dt.entity.service), \"background threads\") or\n            matchesPhrase(entityName(dt.entity.service), \"Health\")\n| filter in($Request, \"ALL\") OR in(endpoint.name, $Request)\n\n| fieldsAdd SlowRequestVar = if(($SlowRequestTheshold == \"ALL\"), toDuration(0),                     else:if(($SlowRequestTheshold == \"5s\"), toDuration(5000000000),\n                     else:if(($SlowRequestTheshold == \"10s\"), toDuration(10000000000),\n                     else:if(($SlowRequestTheshold == \"15s\"), toDuration(15000000000),\n                     else:if(($SlowRequestTheshold == \"30s\"), toDuration(30000000000),\n                     else:if(($SlowRequestTheshold == \"45s\"), toDuration(45000000000),\n                     else:if(($SlowRequestTheshold == \"1m\"), toDuration(60000000000),\n                     else:if(($SlowRequestTheshold == \"5m\"), toDuration(300000000000),\n                     else:if(($SlowRequestTheshold == \"30m\"), toDuration(1800000000000),\n                     else:if(($SlowRequestTheshold == \"1hr\"), toDuration(3600000000000)))))))))))\n| fieldsAdd slowRequest = if(duration > SlowRequestVar, \"SlowRequest\")\n| fieldsAdd eventname = span.events[0][span_event.name]\n| fieldsAdd all = if(isNotNull(request.is_root_span), \"ALL\")\n| fieldsAdd failed = if(request.is_failed == true,\"Failed\")\n| fieldsAdd exception = if(eventname == \"exception\", \"Exception\")\n| fieldsAdd http4xx = if(http.response.status_code >= 400 and http.response.status_code<=499 ,\"HTTP4xx\")\n| fieldsAdd http5xx = if(http.response.status_code >= 500 and http.response.status_code<=599 ,\"HTTP5xx\")\n| filter $AnalysisType == all or \n         $AnalysisType == slowRequest or \n         $AnalysisType == failed or \n         $AnalysisType == exception or \n         $AnalysisType == http4xx or\n         $AnalysisType == http5xx\n| summarize  count = count(), \n             by: {service = entityName(dt.entity.service),\n                  request = endpoint.name}\n| sort count desc\n| fields count, \n         request,\n         service\n| limit 10","davis":{"enabled":false,"davisVisualization":{}},"visualization":"table","visualizationSettings":{"thresholds":[{"id":1,"field":"Errors","title":"","isEnabled":true,"rules":[{"id":0,"color":"#0D9C29","comparator":"≥","label":"","value":0},{"id":1,"color":{"Default":"var(--dt-colors-charts-categorical-color-14-default, #d56b1a)"},"comparator":"≥","label":""},{"id":2,"color":{"Default":"var(--dt-colors-charts-categorical-themed-fireplace-color-01-default, #ae132d)"},"comparator":"≥","label":"","value":1}]}],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"categoricalBarChartSettings":{"categoryAxis":"request","categoryAxisLabel":"request","valueAxis":"count","valueAxisLabel":"count"}},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","autoscale":true,"alignment":"center","recordField":"Service"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[["Errors"],["Latency"],["Service"],["service"]],"lineWrapIds":[["service"],["request"],["count"]],"columnWidths":{"[\"service\"]":163,"[\"url\"]":434,"[\"cnt\"]":69,"[\"Service\"]":309.78125,"[\"Request\"]":286.171875,"[\"Count\"]":85.515625,"[\"Latency\"]":157.921875,"[\"Errors\"]":392.609375}},"histogram":{"dataMappings":[{"valueAxis":"count","rangeAxis":""}]},"honeycomb":{"shape":"square","dataMappings":{"category":"request","value":"count"}}}},"11":{"type":"data","title":"Latency  --> Analysis Type = $AnalysisType","query":"fetch spans\n| filter request.is_root_span == TRUE\n| filter isNotNull(k8s.namespace.name)\n| filter in(k8s.namespace.name, $K8sNamespace)\n| filter in($Service, \"ALL\") OR in(entityName(dt.entity.service), $Service)\n| filterOut matchesPhrase(entityName(dt.entity.service), \"background threads\") or\n            matchesPhrase(entityName(dt.entity.service), \"Health\")\n| filter in($Request, \"ALL\") OR in(endpoint.name, $Request)\n\n| fieldsAdd SlowRequestVar = if(($SlowRequestTheshold == \"ALL\"), toDuration(0),                     \n                     else:if(($SlowRequestTheshold == \"5s\"), toDuration(5000000000),\n                     else:if(($SlowRequestTheshold == \"10s\"), toDuration(10000000000),\n                     else:if(($SlowRequestTheshold == \"15s\"), toDuration(15000000000),\n                     else:if(($SlowRequestTheshold == \"30s\"), toDuration(30000000000),\n                     else:if(($SlowRequestTheshold == \"45s\"), toDuration(45000000000),\n                     else:if(($SlowRequestTheshold == \"1m\"), toDuration(60000000000),\n                     else:if(($SlowRequestTheshold == \"5m\"), toDuration(300000000000),\n                     else:if(($SlowRequestTheshold == \"30m\"), toDuration(1800000000000),\n                     else:if(($SlowRequestTheshold == \"1hr\"), toDuration(3600000000000)))))))))))\n| fieldsAdd slowRequest = if(duration > SlowRequestVar, \"SlowRequest\")\n| fieldsAdd eventname = span.events[0][span_event.name]\n| fieldsAdd all = if(isNotNull(request.is_root_span), \"ALL\")\n| fieldsAdd failed = if(request.is_failed == true,\"Failed\")\n| fieldsAdd exception = if(eventname == \"exception\", \"Exception\")\n| fieldsAdd http4xx = if(http.response.status_code >= 400 and http.response.status_code<=499 ,\"HTTP4xx\")\n| fieldsAdd http5xx = if(http.response.status_code >= 500 and http.response.status_code<=599 ,\"HTTP5xx\")\n| filter $AnalysisType == all or \n         $AnalysisType == slowRequest or \n         $AnalysisType == failed or \n         $AnalysisType == exception or \n         $AnalysisType == http4xx or\n         $AnalysisType == http5xx\n| summarize count = count(), \n            latency = median(duration), \n            by: {service = entityName(dt.entity.service),\n                 request = endpoint.name}\n| sort latency desc\n| fields latency, \n         request,\n         service,\n         count\n| limit 10","davis":{"enabled":false,"davisVisualization":{}},"visualization":"table","visualizationSettings":{"thresholds":[{"id":1,"field":"Errors","title":"","isEnabled":true,"rules":[{"id":0,"color":"#0D9C29","comparator":"≥","label":"","value":0},{"id":1,"color":{"Default":"var(--dt-colors-charts-categorical-color-14-default, #d56b1a)"},"comparator":"≥","label":""},{"id":2,"color":{"Default":"var(--dt-colors-charts-categorical-themed-fireplace-color-01-default, #ae132d)"},"comparator":"≥","label":"","value":1}]}],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"categoricalBarChartSettings":{"categoryAxis":"request","categoryAxisLabel":"request","valueAxis":"latency","valueAxisLabel":"latency"}},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","autoscale":true,"alignment":"center","recordField":"Service"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[["Errors"],["Service"],["Count"],["service"]],"lineWrapIds":[["service"],["request"],["latency"]],"columnWidths":{"[\"service\"]":163,"[\"url\"]":434,"[\"cnt\"]":69,"[\"Service\"]":204,"[\"Request\"]":381,"[\"Latency\"]":127,"[\"Count\"]":86,"[\"Errors\"]":88}},"histogram":{"dataMappings":[{"valueAxis":"latency","rangeAxis":""},{"valueAxis":"count","rangeAxis":""}]},"honeycomb":{"shape":"square","dataMappings":{"category":"request","value":"service"}}}},"12":{"type":"data","title":"Failures  --> Analysis Type = $AnalysisType","query":"fetch spans\n| filter request.is_root_span == true\n| filter request.is_failed == true\n| filter isNotNull(k8s.namespace.name)\n| filter in(k8s.namespace.name, $K8sNamespace)\n| filter in($Service, \"ALL\") OR in(entityName(dt.entity.service), $Service)\n| filterOut matchesPhrase(entityName(dt.entity.service), \"background threads\") or\n            matchesPhrase(entityName(dt.entity.service), \"Health\")\n| filter in($Request, \"ALL\") OR in(endpoint.name, $Request)\n| fieldsAdd SlowRequestVar = if(($SlowRequestTheshold == \"ALL\"), toDuration(0),                     else:if(($SlowRequestTheshold == \"5s\"), toDuration(5000000000),\n                     else:if(($SlowRequestTheshold == \"10s\"), toDuration(10000000000),\n                     else:if(($SlowRequestTheshold == \"15s\"), toDuration(15000000000),\n                     else:if(($SlowRequestTheshold == \"30s\"), toDuration(30000000000),\n                     else:if(($SlowRequestTheshold == \"45s\"), toDuration(45000000000),\n                     else:if(($SlowRequestTheshold == \"1m\"), toDuration(60000000000),\n                     else:if(($SlowRequestTheshold == \"5m\"), toDuration(300000000000),\n                     else:if(($SlowRequestTheshold == \"30m\"), toDuration(1800000000000),\n                     else:if(($SlowRequestTheshold == \"1hr\"), toDuration(3600000000000)))))))))))\n| fieldsAdd slowRequest = if(duration > SlowRequestVar, \"SlowRequest\")\n| fieldsAdd eventname = span.events[0][span_event.name]\n| fieldsAdd all = if(isNotNull(request.is_root_span), \"ALL\")\n| fieldsAdd failed = if(request.is_failed == true,\"Failed\")\n| fieldsAdd exception = if(eventname == \"exception\", \"Exception\")\n| fieldsAdd http4xx = if(http.response.status_code >= 400 and http.response.status_code<=499 ,\"HTTP4xx\")\n| fieldsAdd http5xx = if(http.response.status_code >= 500 and http.response.status_code<=599 ,\"HTTP5xx\")\n| filter $AnalysisType == all or \n         $AnalysisType == slowRequest or \n         $AnalysisType == failed or \n         $AnalysisType == exception or \n         $AnalysisType == http4xx or\n         $AnalysisType == http5xx\n| summarize  count = count(),\n             by: {service = entityName(dt.entity.service),\n                  request = endpoint.name, \n                  status.code = http.response.status_code}\n| sort count desc\n| fields count,\n         request,\n         status.code,\n         service\n| limit 10","davis":{"enabled":false,"davisVisualization":{}},"visualization":"table","visualizationSettings":{"thresholds":[{"id":1,"field":"Errors","title":"","isEnabled":true,"rules":[{"id":0,"color":"#0D9C29","comparator":"≥","label":"","value":0},{"id":1,"color":{"Default":"var(--dt-colors-charts-categorical-color-14-default, #d56b1a)"},"comparator":"≥","label":""},{"id":2,"color":{"Default":"var(--dt-colors-charts-categorical-themed-fireplace-color-01-default, #ae132d)"},"comparator":"≥","label":"","value":1}]}],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"categoricalBarChartSettings":{"categoryAxisLabel":"request","valueAxisLabel":"count","categoryAxis":"request","valueAxis":"count"}},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","autoscale":true,"alignment":"center","recordField":"Service"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[["Latency"],["ResponseCode"],["Service"]],"lineWrapIds":[["service"],["request"],["count"]],"columnWidths":{"[\"service\"]":163,"[\"url\"]":434,"[\"cnt\"]":69,"[\"Service\"]":225.53125,"[\"Request\"]":273.25,"[\"Errors\"]":87.875,"[\"ResponseCode\"]":140.53125,"[\"Latency\"]":97.921875}},"honeycomb":{"shape":"square","dataMappings":{"category":"request","value":"count"}},"histogram":{"dataMappings":[{"valueAxis":"count","rangeAxis":""},{"valueAxis":"status.code","rangeAxis":""}]}}},"13":{"type":"data","title":"Latency   --> Analysis Type = $AnalysisType","query":"fetch spans\n| filter request.is_root_span == TRUE\n| filter isNotNull(k8s.namespace.name)\n| filter in(k8s.namespace.name, $K8sNamespace)\n| filter in($Service, \"ALL\") OR in(entityName(dt.entity.service), $Service)\n| filterOut matchesPhrase(entityName(dt.entity.service), \"background threads\") or\n            matchesPhrase(entityName(dt.entity.service), \"Health\")\n| filter in($Request, \"ALL\") OR in(endpoint.name, $Request)\n\n| fieldsAdd SlowRequestVar = if(($SlowRequestTheshold == \"ALL\"), toDuration(0),\n                     else:if(($SlowRequestTheshold == \"5s\"), toDuration(5000000000),\n                     else:if(($SlowRequestTheshold == \"10s\"), toDuration(10000000000),\n                     else:if(($SlowRequestTheshold == \"15s\"), toDuration(15000000000),\n                     else:if(($SlowRequestTheshold == \"30s\"), toDuration(30000000000),\n                     else:if(($SlowRequestTheshold == \"45s\"), toDuration(45000000000),\n                     else:if(($SlowRequestTheshold == \"1m\"), toDuration(60000000000),\n                     else:if(($SlowRequestTheshold == \"5m\"), toDuration(300000000000),\n                     else:if(($SlowRequestTheshold == \"30m\"), toDuration(1800000000000),\n                     else:if(($SlowRequestTheshold == \"1hr\"), toDuration(3600000000000)))))))))))\n| fieldsAdd slowRequest = if(duration > SlowRequestVar, \"SlowRequest\")\n| fieldsAdd eventname = span.events[0][span_event.name]\n| fieldsAdd all = if(isNotNull(request.is_root_span), \"ALL\")\n| fieldsAdd failed = if(request.is_failed == true,\"Failed\")\n| fieldsAdd exception = if(eventname == \"exception\", \"Exception\")\n| fieldsAdd http4xx = if(http.response.status_code >= 400 and http.response.status_code<=499 ,\"HTTP4xx\")\n| fieldsAdd http5xx = if(http.response.status_code >= 500 and http.response.status_code<=599 ,\"HTTP5xx\")\n| filter $AnalysisType == all or \n         $AnalysisType == slowRequest or \n         $AnalysisType == failed or \n         $AnalysisType == exception or \n         $AnalysisType == http4xx or\n         $AnalysisType == http5xx\n| makeTimeseries latency = median(duration),\n                 by: {service = entityName(dt.entity.service),\n                     request = endpoint.name}\n| sort latency","davis":{"enabled":false,"davisVisualization":{}},"visualization":"lineChart","visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"categoricalBarChartSettings":{"categoryAxisLabel":"service","valueAxisLabel":"interval","categoryAxis":"service","valueAxis":"interval"},"hiddenLegendFields":[],"legend":{"hidden":true},"fieldMapping":{"timestamp":"timeframe","leftAxisValues":["latency"],"leftAxisDimensions":["service","request"]}},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","autoscale":true,"alignment":"center","recordField":"Service"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[["trace.id"],["span.id"],["end_time"],["all"],["request.is_root_span"],["k8s.namespace.name"],["dt.entity.service"],["endpoint.name"],["thread.id"],["dt.entity.process_group"],["k8s.container.name"],["deployment.release_product"],["deployment.release_version"],["dt.entity.process_group_instance"],["k8s.pod.uid"],["deployment.release_stage"],["OperatorVersion"],["process.executable.name"],["dt.entity.host"],["k8s.cluster.uid"],["k8s.pod.name"],["dt.entity.host_group"],["process.executable.path"],["dt.entity.container_group"],["dt.entity.container_group_instance"],["dt.host_group.id"],["host.name"],["dt.agent.module.type"],["dt.agent.module.version"],["dt.agent.module.version_short"],["dt.agent.module.id"],["process.pid"],["span.is_subroutine"],["span.kind"],["rpc.system"],["rpc.protocol"],["rpc.framework"],["rpc.service"],["rpc.method"],["rpc.namespace"],["code.function"],["code.namespace"],["code.filepath"],["request_attribute.SourceIP"],["request_attribute.ClientIP"],["request_attribute.testGerman"],["span.timing.cpu"],["span.timing.cpu_self"],["request.id"],["dt.retain.size"],["span.parent_id"],["http.server_name"],["network.protocol.name"],["http.request.header.host"],["http.request.header.user-agent"],["http.request.header.accept"],["http.response.header.content-type"],["http.request.method"],["http.response.status_code"],["server.address"],["url.path"],["request_attribute.sessionid"],["request_attribute.URL 2"],["request_attribute.ValidUsers"],["span.links"],["server.port"],["go.linkage"],["http.request.header.x-dynatrace"],["http.route"],["request_attribute.TestMissingAttribute"],["request.is_failed"],["dt.internal.failure_detection_verdict"],["span.is_exit_by_exception"],["span.exit_by_exception_id"],["span.events"]],"lineWrapIds":[],"columnWidths":{"[\"service\"]":163,"[\"url\"]":434,"[\"cnt\"]":69,"[\"Service\"]":204,"[\"Request\"]":381,"[\"Latency\"]":127,"[\"Count\"]":86,"[\"Errors\"]":88}},"histogram":{"dataMappings":[{"valueAxis":"interval","rangeAxis":""}]},"honeycomb":{"shape":"square","dataMappings":{"category":"service","value":"request"}},"unitsOverrides":[{"identifier":"latency","unitCategory":"time","baseUnit":"nanosecond","displayUnit":null,"decimals":0,"suffix":"","delimiter":false,"added":1715025717257}]}},"14":{"type":"data","title":"Failures   --> Analysis Type = $AnalysisType","query":"fetch spans\n| filter request.is_root_span == true\n| filter request.is_failed == true\n| filter isNotNull(k8s.namespace.name)\n| filter in(k8s.namespace.name, $K8sNamespace)\n| filter in($Service, \"ALL\") OR in(entityName(dt.entity.service), $Service)\n| filterOut matchesPhrase(entityName(dt.entity.service), \"background threads\") or\n            matchesPhrase(entityName(dt.entity.service), \"Health\")\n| filter in($Request, \"ALL\") OR in(endpoint.name, $Request)\n\n| fieldsAdd SlowRequestVar = if(($SlowRequestTheshold == \"ALL\"), toDuration(0),\n                     else:if(($SlowRequestTheshold == \"5s\"), toDuration(5000000000),\n                     else:if(($SlowRequestTheshold == \"10s\"), toDuration(10000000000),\n                     else:if(($SlowRequestTheshold == \"15s\"), toDuration(15000000000),\n                     else:if(($SlowRequestTheshold == \"30s\"), toDuration(30000000000),\n                     else:if(($SlowRequestTheshold == \"45s\"), toDuration(45000000000),\n                     else:if(($SlowRequestTheshold == \"1m\"), toDuration(60000000000),\n                     else:if(($SlowRequestTheshold == \"5m\"), toDuration(300000000000),\n                     else:if(($SlowRequestTheshold == \"30m\"), toDuration(1800000000000),\n                     else:if(($SlowRequestTheshold == \"1hr\"), toDuration(3600000000000)))))))))))\n| fieldsAdd slowRequest = if(duration > SlowRequestVar, \"SlowRequest\")\n| fieldsAdd eventname = span.events[0][span_event.name]\n| fieldsAdd all = if(isNotNull(request.is_root_span), \"ALL\")\n| fieldsAdd failed = if(request.is_failed == true,\"Failed\")\n| fieldsAdd exception = if(eventname == \"exception\", \"Exception\")\n| fieldsAdd http4xx = if(http.response.status_code >= 400 and http.response.status_code<=499 ,\"HTTP4xx\")\n| fieldsAdd http5xx = if(http.response.status_code >= 500 and http.response.status_code<=599 ,\"HTTP5xx\")\n| filter $AnalysisType == all or \n         $AnalysisType == slowRequest or \n         $AnalysisType == failed or \n         $AnalysisType == exception or \n         $AnalysisType == http4xx or\n         $AnalysisType == http5xx\n| makeTimeseries count = count(),\n                 by: {service = entityName(dt.entity.service),\n                     request = endpoint.name,\n                     status.code = http.response.status_code}\n| sort count desc                    \n                \n\n","davis":{"enabled":false,"davisVisualization":{}},"visualization":"barChart","visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"categoricalBarChartSettings":{"categoryAxisLabel":"service","valueAxisLabel":"status.code","categoryAxis":"service","valueAxis":"status.code"},"hiddenLegendFields":[],"legend":{"hidden":true},"colorPalette":"log-level","fieldMapping":{"timestamp":"timeframe","leftAxisValues":["count"],"leftAxisDimensions":["service","request","status.code"]}},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","autoscale":true,"alignment":"center","recordField":"Service"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[["Latency"],["ResponseCode"],["Service"]],"lineWrapIds":[],"columnWidths":{"[\"service\"]":163,"[\"url\"]":434,"[\"cnt\"]":69,"[\"Service\"]":225.53125,"[\"Request\"]":273.25,"[\"Errors\"]":87.875,"[\"ResponseCode\"]":140.53125,"[\"Latency\"]":97.921875}},"honeycomb":{"shape":"square","dataMappings":{"category":"service","value":"request"}},"histogram":{"dataMappings":[{"valueAxis":"interval","rangeAxis":""},{"valueAxis":"status.code","rangeAxis":""}]}}},"15":{"type":"data","title":" Requests  --> Analysis Type = $AnalysisType","query":"fetch spans\n| filter request.is_root_span == TRUE\n| filter isNotNull(k8s.namespace.name)\n| filter in(k8s.namespace.name, $K8sNamespace)\n| filter in($Service, \"ALL\") OR in(entityName(dt.entity.service), $Service)\n| filterOut matchesPhrase(entityName(dt.entity.service), \"background threads\") or\n            matchesPhrase(entityName(dt.entity.service), \"Health\")\n| filter in($Request, \"ALL\") OR in(endpoint.name, $Request)\n\n| fieldsAdd SlowRequestVar = if(($SlowRequestTheshold == \"ALL\"), toDuration(0),\n                     else:if(($SlowRequestTheshold == \"5s\"), toDuration(5000000000),\n                     else:if(($SlowRequestTheshold == \"10s\"), toDuration(10000000000),\n                     else:if(($SlowRequestTheshold == \"15s\"), toDuration(15000000000),\n                     else:if(($SlowRequestTheshold == \"30s\"), toDuration(30000000000),\n                     else:if(($SlowRequestTheshold == \"45s\"), toDuration(45000000000),\n                     else:if(($SlowRequestTheshold == \"1m\"), toDuration(60000000000),\n                     else:if(($SlowRequestTheshold == \"5m\"), toDuration(300000000000),\n                     else:if(($SlowRequestTheshold == \"30m\"), toDuration(1800000000000),\n                     else:if(($SlowRequestTheshold == \"1hr\"), toDuration(3600000000000)))))))))))\n| fieldsAdd slowRequest = if(duration > SlowRequestVar, \"SlowRequest\")\n| fieldsAdd eventname = span.events[0][span_event.name]\n| fieldsAdd all = if(isNotNull(request.is_root_span), \"ALL\")\n| fieldsAdd failed = if(request.is_failed == true,\"Failed\")\n| fieldsAdd exception = if(eventname == \"exception\", \"Exception\")\n| fieldsAdd http4xx = if(http.response.status_code >= 400 and http.response.status_code<=499 ,\"HTTP4xx\")\n| fieldsAdd http5xx = if(http.response.status_code >= 500 and http.response.status_code<=599 ,\"HTTP5xx\")\n| filter $AnalysisType == all or \n         $AnalysisType == slowRequest or \n         $AnalysisType == failed or \n         $AnalysisType == exception or \n         $AnalysisType == http4xx or\n         $AnalysisType == http5xx\n| makeTimeseries count = count(), \n                 by: {service = entityName(dt.entity.service),\n                      request = endpoint.name}\n| sort count desc\n","davis":{"enabled":false,"davisVisualization":{}},"visualization":"lineChart","visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"categoricalBarChartSettings":{"categoryAxis":"service","categoryAxisLabel":"service","valueAxis":"interval","valueAxisLabel":"interval"},"fieldMapping":{"timestamp":"timeframe","leftAxisValues":["count"],"leftAxisDimensions":["service","request"]},"hiddenLegendFields":[],"legend":{"hidden":true}},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","autoscale":true,"alignment":"center","recordField":"Service"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[["Errors"],["Latency"],["Service"]],"lineWrapIds":[["Service"]],"columnWidths":{"[\"service\"]":163,"[\"url\"]":434,"[\"cnt\"]":69,"[\"Service\"]":309.78125,"[\"Request\"]":286.171875,"[\"Count\"]":85.515625,"[\"Latency\"]":157.921875,"[\"Errors\"]":392.609375}},"histogram":{"dataMappings":[{"valueAxis":"interval","rangeAxis":""}]},"honeycomb":{"shape":"square","dataMappings":{"category":"service","value":"request"}}}},"18":{"type":"data","title":"Exceptions  --> Analysis Type = $AnalysisType","query":"fetch spans\n| filter request.is_root_span == TRUE\n| filter isNotNull(k8s.namespace.name) \n| filter in(k8s.namespace.name, $K8sNamespace)\n| filter in($Service, \"ALL\") OR in(entityName(dt.entity.service), $Service)\n| filterOut matchesPhrase(entityName(dt.entity.service), \"background threads\") or\n            matchesPhrase(entityName(dt.entity.service), \"Health\")\n| filter in($Request, \"ALL\") OR in(endpoint.name, $Request)\n| fieldsAdd SlowRequestVar = if(($SlowRequestTheshold == \"ALL\"), toDuration(0),                     \n                     else:if(($SlowRequestTheshold == \"5s\"), toDuration(5000000000),\n                     else:if(($SlowRequestTheshold == \"10s\"), toDuration(10000000000),\n                     else:if(($SlowRequestTheshold == \"15s\"), toDuration(15000000000),\n                     else:if(($SlowRequestTheshold == \"30s\"), toDuration(30000000000),\n                     else:if(($SlowRequestTheshold == \"45s\"), toDuration(45000000000),\n                     else:if(($SlowRequestTheshold == \"1m\"), toDuration(60000000000),\n                     else:if(($SlowRequestTheshold == \"5m\"), toDuration(300000000000),\n                     else:if(($SlowRequestTheshold == \"30m\"), toDuration(1800000000000),\n                     else:if(($SlowRequestTheshold == \"1hr\"), toDuration(3600000000000)))))))))))\n| fieldsAdd slowRequest = if(duration > SlowRequestVar, \"SlowRequest\")\n| fieldsAdd eventname = span.events[0][span_event.name]\n| fieldsAdd all = if(isNotNull(request.is_root_span), \"ALL\")\n| fieldsAdd failed = if(request.is_failed == true,\"Failed\")\n| fieldsAdd http4xx = if(http.response.status_code >= 400 and http.response.status_code<=499 ,\"HTTP4xx\")\n| fieldsAdd http5xx = if(http.response.status_code >= 500 and http.response.status_code<=599 ,\"HTTP5xx\")\n| fieldsAdd exception = if(eventname == \"exception\", \"Exception\")\n| fieldsAdd exception.message = span.events[0][exception.message]\n| fieldsAdd exception.class = span.events[0][exception.type]\n| fieldsAdd eventname = span.events[0][span_event.name]\n| filter eventname == \"exception\"\n| filter $AnalysisType == all or \n         $AnalysisType == slowRequest or \n         $AnalysisType == failed or \n         $AnalysisType == exception or \n         $AnalysisType == http4xx or\n         $AnalysisType == http5xx\n| summarize count = count(), by:{service = entityName(dt.entity.service),\n                                 request = endpoint.name, \n                                 class = exception.class, \n                                 message = exception.message}\n| sort count desc\n| fields count,\n         request,\n         message,   \n         class,\n         service\n| limit 10\n","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"table","visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"categoricalBarChartSettings":{"categoryAxis":"request","categoryAxisLabel":"request","valueAxis":"count","valueAxisLabel":"count"}},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","recordField":"Service","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[["count"],["request"],["message"],["class"],["service"]],"columnWidths":{}},"honeycomb":{"shape":"hexagon","dataMappings":{"category":"request","value":"count"}},"histogram":{"dataMappings":[{"valueAxis":"count","rangeAxis":""}]}}},"20":{"type":"data","title":" Analysis Type = $AnalysisType","query":"fetch spans\n| filter request.is_root_span == TRUE\n| filter isNotNull(k8s.namespace.name)\n| filter in(k8s.namespace.name, $K8sNamespace)\n| filter in($Service, \"ALL\") OR in(entityName(dt.entity.service), $Service)\n| filterOut matchesPhrase(entityName(dt.entity.service), \"background threads\") or\n            matchesPhrase(entityName(dt.entity.service), \"Health\")\n| filter in($Request, \"ALL\") OR in(endpoint.name, $Request)\n\n| fieldsAdd SlowRequestVar = if(($SlowRequestTheshold == \"ALL\"), toDuration(0),                     else:if(($SlowRequestTheshold == \"5s\"), toDuration(5000000000),\n                     else:if(($SlowRequestTheshold == \"10s\"), toDuration(10000000000),\n                     else:if(($SlowRequestTheshold == \"15s\"), toDuration(15000000000),\n                     else:if(($SlowRequestTheshold == \"30s\"), toDuration(30000000000),\n                     else:if(($SlowRequestTheshold == \"45s\"), toDuration(45000000000),\n                     else:if(($SlowRequestTheshold == \"1m\"), toDuration(60000000000),\n                     else:if(($SlowRequestTheshold == \"5m\"), toDuration(300000000000),\n                     else:if(($SlowRequestTheshold == \"30m\"), toDuration(1800000000000),\n                     else:if(($SlowRequestTheshold == \"1hr\"), toDuration(3600000000000)))))))))))\n\n\n| fieldsAdd slowRequest = if(duration > SlowRequestVar, \"SlowRequest\")\n| fieldsAdd eventname = span.events[0][span_event.name]\n| fieldsAdd all = if(isNotNull(request.is_root_span), \"ALL\")\n| fieldsAdd failed = if(request.is_failed == true,\"Failed\")\n| fieldsAdd exception = if(eventname == \"exception\", \"Exception\")\n| fieldsAdd http4xx = if(http.response.status_code >= 400 and http.response.status_code<=499 ,\"HTTP4xx\")\n| fieldsAdd http5xx = if(http.response.status_code >= 500 and http.response.status_code<=599 ,\"HTTP5xx\")\n| filter $AnalysisType == all or \n         $AnalysisType == slowRequest or \n         $AnalysisType == failed or \n         $AnalysisType == exception or \n         $AnalysisType == http4xx or\n         $AnalysisType == http5xx\n\n| fieldsAdd exception.message = span.events[0][exception.message]\n| fieldsAdd exception.class = span.events[0][exception.type]\n| fieldsAdd eventname = span.events[0][span_event.name]\n| fieldsAdd method = if(isNotNull(http.request.method), http.request.method, else: \"gRPC\")\n| fieldsAdd grpcError = if(rpc.protocol == \"grpc\", span.events[][exception.message])\n| parse dt.internal.failure_detection_verdict, \"DATA 'ExceptionClass: ' LD:exceptionClass PUNCT\"\n| parse toString(grpcError), \"DATA 'rpc error: code = Code(' INT:grpcErrorCode ')'\"\n| fieldsAdd status.code = if(isNotNull(http.response.status_code),http.response.status_code, \n                          else:if(grpcErrorCode > 0, grpcErrorCode, \n                          else:if(isNotNull(exceptionClass),exceptionClass,\n                          else:grpcError)))\n| sort timestamp desc\n| fieldsAdd analysisType = $AnalysisType\n\n| fields  analysisType = if(analysisType == \"ALL\", \"🌐 ALL\",\n                         else:if(analysisType == \"SlowRequest\", \" 📈 SlowRequest\",\n                         else:if(analysisType == \"Failed\", \"❌ Failed\",\n                         else:if(analysisType == \"Exception\", \"❗️Exception\",\n                         else:if(analysisType == \"HTTP4xx\", \"🟠 HTTP4xx\",\n                         else:if(analysisType == \"HTTP5xx\", \"🔴 HTTP5xx\"\n                         )))))),\n         start_time,\n         service = entityName(dt.entity.service),\n         request = endpoint.name, \n         method,\n         status.code,\n         exception.message = if(isNotNull(exception.message), exception.message, else:\"No Exception\"),\n         duration,\n         trace.id\n| limit 1000\n","davis":{"enabled":false,"davisVisualization":{}},"visualization":"table","visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"categoricalBarChartSettings":{"categoryAxis":"analysisType","categoryAxisLabel":"analysisType","valueAxis":"status.code","valueAxisLabel":"status.code"},"fieldMapping":{"timestamp":"start_time","leftAxisValues":["status.code"],"leftAxisDimensions":["analysisType"]},"hiddenLegendFields":[],"legend":{"hidden":true}},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","autoscale":true,"alignment":"center","recordField":"Service"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[["Errors"]],"lineWrapIds":[["start_time"],["analysisType"],["service"],["request"],["method"],["status.code"],["exception.message"],["duration"],["trace.id"]],"columnWidths":{"[\"service\"]":163,"[\"url\"]":434,"[\"cnt\"]":69,"[\"Service\"]":204,"[\"Request\"]":381,"[\"Latency\"]":127,"[\"Count\"]":86,"[\"Errors\"]":88}},"histogram":{"dataMappings":[{"valueAxis":"status.code","rangeAxis":""},{"valueAxis":"duration","rangeAxis":""}]},"honeycomb":{"shape":"square","dataMappings":{"category":"analysisType","value":"start_time"}},"unitsOverrides":[{"identifier":"LatencyMedian","unitCategory":"time","baseUnit":"nanosecond","displayUnit":null,"decimals":2,"suffix":"","delimiter":false,"added":1715025717257}]}},"22":{"type":"data","title":"Exceptions  --> Analysis Type = $AnalysisType","query":"fetch spans\n| filter request.is_root_span == TRUE\n| filter isNotNull(k8s.namespace.name) \n| filter in(k8s.namespace.name, $K8sNamespace)\n| filter in($Service, \"ALL\") OR in(entityName(dt.entity.service), $Service)\n| filterOut matchesPhrase(entityName(dt.entity.service), \"background threads\") or\n            matchesPhrase(entityName(dt.entity.service), \"Health\")\n| filter in($Request, \"ALL\") OR in(endpoint.name, $Request)\n| fieldsAdd SlowRequestVar = if(($SlowRequestTheshold == \"ALL\"), toDuration(0),                     \n                     else:if(($SlowRequestTheshold == \"5s\"), toDuration(5000000000),\n                     else:if(($SlowRequestTheshold == \"10s\"), toDuration(10000000000),\n                     else:if(($SlowRequestTheshold == \"15s\"), toDuration(15000000000),\n                     else:if(($SlowRequestTheshold == \"30s\"), toDuration(30000000000),\n                     else:if(($SlowRequestTheshold == \"45s\"), toDuration(45000000000),\n                     else:if(($SlowRequestTheshold == \"1m\"), toDuration(60000000000),\n                     else:if(($SlowRequestTheshold == \"5m\"), toDuration(300000000000),\n                     else:if(($SlowRequestTheshold == \"30m\"), toDuration(1800000000000),\n                     else:if(($SlowRequestTheshold == \"1hr\"), toDuration(3600000000000)))))))))))\n| fieldsAdd slowRequest = if(duration > SlowRequestVar, \"SlowRequest\")\n| fieldsAdd eventname = span.events[0][span_event.name]\n| fieldsAdd all = if(isNotNull(request.is_root_span), \"ALL\")\n| fieldsAdd failed = if(request.is_failed == true,\"Failed\")\n| fieldsAdd http4xx = if(http.response.status_code >= 400 and http.response.status_code<=499 ,\"HTTP4xx\")\n| fieldsAdd http5xx = if(http.response.status_code >= 500 and http.response.status_code<=599 ,\"HTTP5xx\")\n| fieldsAdd exception = if(eventname == \"exception\", \"Exception\")\n| fieldsAdd exception.message = span.events[0][exception.message]\n| fieldsAdd exception.class = span.events[0][exception.type]\n| fieldsAdd eventname = span.events[0][span_event.name]\n| filter eventname == \"exception\"\n| filter $AnalysisType == all or \n         $AnalysisType == slowRequest or \n         $AnalysisType == failed or \n         $AnalysisType == exception or \n         $AnalysisType == http4xx or\n         $AnalysisType == http5xx\n| makeTimeseries count = count(), \n                 by:{service = entityName(dt.entity.service),\n                     request = endpoint.name, \n                     class = exception.class, \n                     message = exception.message}\n\n","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"barChart","visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"categoricalBarChartSettings":{"categoryAxis":"service","categoryAxisLabel":"service","valueAxis":"interval","valueAxisLabel":"interval"},"hiddenLegendFields":["class"],"fieldMapping":{"timestamp":"timeframe","leftAxisValues":["count"],"leftAxisDimensions":["service","request","class","message"]},"legend":{"hidden":true}},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","recordField":"Service","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[["service"]],"lineWrapIds":[["service"],["request"],["message"],["count"]],"columnWidths":{}},"honeycomb":{"shape":"hexagon","dataMappings":{"category":"service","value":"request"}},"histogram":{"dataMappings":[{"valueAxis":"interval","rangeAxis":""}]}}},"23":{"type":"data","title":"Process CPU %","query":"timeseries cpu = avg(dt.process.cpu.usage), \n           by:{dt.entity.process_group_instance},\n           filter:k8s.namespace.name == $K8sNamespace\n| lookup [fetch dt.entity.process_group_instance \n         | fields id, serviceId=runs[dt.entity.service], belongs_to], \n         sourceField:dt.entity.process_group_instance, lookupField:id\n| filter isNotNull(lookup.serviceId)\n| expand lookup.serviceId\n| lookup [fetch dt.entity.service \n         | fields id, entity.name], \n         sourceField:lookup.serviceId, lookupField:id\n| filter in($Service , \"ALL\") OR in(lookup.entity.name, $Service)   \n| sort cpu desc\n| limit 20\n| fields timeframe, \n         interval,\n         service = lookup.entity.name,\n         process = entityName(dt.entity.process_group_instance), \n         cpu","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"lineChart","visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"categoricalBarChartSettings":{"categoryAxis":"service","categoryAxisLabel":"service","valueAxis":"interval","valueAxisLabel":"interval"},"hiddenLegendFields":["k8sspace.name"],"fieldMapping":{"timestamp":"timeframe","leftAxisValues":["cpu"],"leftAxisDimensions":["service","process"]},"legend":{"hidden":true}},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","recordField":"k8s.namespace.name","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"columnWidths":{}},"histogram":{"dataMappings":[{"valueAxis":"interval","rangeAxis":""}]},"honeycomb":{"shape":"hexagon","dataMappings":{"category":"service","value":"process"}}}},"24":{"type":"data","title":"Process Memory %","query":"timeseries memory = avg(dt.process.memory.usage), \n           by:{dt.entity.process_group_instance},\n           filter:k8s.namespace.name == $K8sNamespace\n| lookup [fetch dt.entity.process_group_instance \n         | fields id, serviceId=runs[dt.entity.service], belongs_to], \n         sourceField:dt.entity.process_group_instance, lookupField:id\n| filter isNotNull(lookup.serviceId)\n| expand lookup.serviceId\n| lookup [fetch dt.entity.service \n         | fields id, entity.name], \n         sourceField:lookup.serviceId, lookupField:id\n| filter in($Service , \"ALL\") OR in(lookup.entity.name, $Service)   \n| sort memory desc\n| limit 20\n| fields timeframe, \n         interval,\n         service = lookup.entity.name,\n         process = entityName(dt.entity.process_group_instance), \n         memory","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"lineChart","visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"categoricalBarChartSettings":{"categoryAxis":"service","categoryAxisLabel":"service","valueAxis":"interval","valueAxisLabel":"interval"},"hiddenLegendFields":[],"fieldMapping":{"timestamp":"timeframe","leftAxisValues":["memory"],"leftAxisDimensions":["service","process"]},"legend":{"hidden":true}},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","recordField":"process","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"columnWidths":{}},"histogram":{"dataMappings":[{"valueAxis":"interval","rangeAxis":""}]},"honeycomb":{"shape":"hexagon","dataMappings":{"category":"service","value":"process"}}}},"25":{"type":"data","title":"Process Memory Used","query":"timeseries memoryUsed = avg(dt.process.memory.working_set_size), \n           by:{dt.entity.process_group_instance},\n           filter:k8s.namespace.name == $K8sNamespace\n| lookup [fetch dt.entity.process_group_instance \n         | fields id, serviceId=runs[dt.entity.service], belongs_to], \n         sourceField:dt.entity.process_group_instance, lookupField:id\n| filter isNotNull(lookup.serviceId)\n| expand lookup.serviceId\n| lookup [fetch dt.entity.service \n         | fields id, entity.name], \n         sourceField:lookup.serviceId, lookupField:id\n| filter in($Service , \"ALL\") OR in(lookup.entity.name, $Service)   \n| sort memoryUsed desc\n| limit 20\n| fields timeframe, \n         interval, \n         service = lookup.entity.name,\n         process = entityName(dt.entity.process_group_instance), \n         memoryUsed ","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"lineChart","visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"categoricalBarChartSettings":{"categoryAxis":"service","categoryAxisLabel":"service","valueAxis":"interval","valueAxisLabel":"interval"},"hiddenLegendFields":[],"fieldMapping":{"timestamp":"timeframe","leftAxisValues":["memoryUsed"],"leftAxisDimensions":["service","process"]},"legend":{"hidden":true}},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","recordField":"process","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"columnWidths":{}},"histogram":{"dataMappings":[{"valueAxis":"interval","rangeAxis":""}]},"honeycomb":{"shape":"hexagon","dataMappings":{"category":"service","value":"process"}}}},"26":{"type":"data","title":"Garbage collection suspension time","query":"timeseries usage = avg(dt.runtime.jvm.gc.suspension_time),\n           by:{dt.entity.process_group_instance},\n           filter:k8s.namespace.name == $K8sNamespace\n\n| append [timeseries usage = avg(dt.runtime.clr.gc.suspension_time),\n           by:{dt.entity.process_group_instance},\n           filter:k8s.namespace.name == $K8sNamespace\n         ]\n\n| append [timeseries usage = avg(dt.runtime.go.gc.suspension_time),\n           by:{dt.entity.process_group_instance},\n           filter:k8s.namespace.name == $K8sNamespace\n         ]\n\n| append [timeseries usage = avg(dt.runtime.nodejs.gc.suspension_time),\n           by:{dt.entity.process_group_instance},\n           filter:k8s.namespace.name == $K8sNamespace\n         ]\n\n| lookup [fetch dt.entity.process_group_instance \n         | fields id, serviceId=runs[dt.entity.service], belongs_to], \n         sourceField:dt.entity.process_group_instance, lookupField:id\n| filter isNotNull(lookup.serviceId)\n| expand lookup.serviceId\n| lookup [fetch dt.entity.service \n         | fields id, entity.name], \n         sourceField:lookup.serviceId, lookupField:id\n| filter in($Service , \"ALL\") OR in(lookup.entity.name, $Service)   \n| sort usage desc\n| limit 20\n| fields timeframe, \n         interval,\n         service = lookup.entity.name,\n         process = entityName(dt.entity.process_group_instance), \n         usage\n","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"lineChart","visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"categoricalBarChartSettings":{"categoryAxis":"service","categoryAxisLabel":"service","valueAxis":"interval","valueAxisLabel":"interval"},"hiddenLegendFields":["k8sspace.name"],"fieldMapping":{"timestamp":"timeframe","leftAxisValues":["usage"],"leftAxisDimensions":["service","process"]},"legend":{"hidden":true}},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","recordField":"k8s.namespace.name","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"columnWidths":{}},"histogram":{"dataMappings":[{"valueAxis":"interval","rangeAxis":""}]},"honeycomb":{"shape":"hexagon","dataMappings":{"category":"service","value":"process"}}}},"27":{"type":"markdown","title":"","content":"### 📉 Saturation"},"28":{"type":"markdown","title":"","content":"### 📊 Traffic"},"29":{"type":"markdown","title":"","content":"### ❌ Failures"},"30":{"type":"markdown","title":"","content":"### 🔎 Distributed Traces"},"31":{"type":"markdown","title":"","content":"### 📈 Latency"},"32":{"type":"markdown","title":"","content":"### ❗️Exceptions"},"33":{"type":"markdown","title":"","content":"## 💡 K8s Multi-Dimensional Analysis with Drill down to Distributed Traces\n____"}},"layouts":{"10":{"x":0,"y":6,"w":6,"h":4},"11":{"x":6,"y":6,"w":6,"h":4},"12":{"x":12,"y":6,"w":6,"h":4},"13":{"x":6,"y":2,"w":6,"h":4},"14":{"x":12,"y":2,"w":6,"h":4},"15":{"x":0,"y":2,"w":6,"h":4},"18":{"x":18,"y":6,"w":6,"h":4},"20":{"x":0,"y":11,"w":24,"h":9},"22":{"x":18,"y":2,"w":6,"h":4},"23":{"x":0,"y":21,"w":6,"h":4},"24":{"x":18,"y":21,"w":6,"h":4},"25":{"x":12,"y":21,"w":6,"h":4},"26":{"x":6,"y":21,"w":6,"h":4},"27":{"x":0,"y":20,"w":24,"h":1},"28":{"x":0,"y":1,"w":6,"h":1},"29":{"x":12,"y":1,"w":6,"h":1},"30":{"x":0,"y":10,"w":24,"h":1},"31":{"x":6,"y":1,"w":6,"h":1},"32":{"x":18,"y":1,"w":6,"h":1},"33":{"x":0,"y":0,"w":24,"h":1}},"importedWithCode":false}