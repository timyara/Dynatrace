{"version":14,"variables":[{"key":"Application","type":"query","input":"fetch dt.entity.host\n| fields managementZones\n| append [ fetch dt.entity.service\n         | fields id,managementZones\n         ]\n| append [ fetch dt.entity.application\n         | fields id, managementZones\n         ]\n| append [ fetch dt.entity.mobile_application\n         | fields id, managementZones\n         ]   \n| append [ fetch dt.entity.custom_application\n         | fields id, managementZones\n         ]   \n| append [ fetch dt.entity.synthetic_test\n         | fields id, managementZones\n         ]   \n| append [ fetch dt.entity.http_check\n         | fields id, managementZones\n         ] \n\n| append [ fetch dt.entity.process_group\n         | fields id, managementZones\n         ] \n\n| append [ fetch dt.entity.process_group_instance\n         | fields id, managementZones\n         ]  \n         \n| append [ fetch dt.entity.host\n         | fields id, managementZones\n         ]  \n| append [ fetch dt.entity.cloud_application\n         | fields id, managementZones\n         ]  \n| append [ fetch dt.entity.kubernetes_cluster\n         | fields id, managementZones\n         ]  \n| append [ fetch dt.entity.custom_device\n         | fields id, managementZones\n         ]  \n| append [ fetch dt.entity.hypervisor\n         | fields id, managementZones\n         ]  \n| expand managementZones\n| filter isNotNull(managementZones)\n//| filter not matchesPhrase(managementZones, \"_TEST\") \n| summarize distinctManagementZone = collectDistinct(managementZones)\n| expand distinctManagementZone\n| sort distinctManagementZone asc\n//| fields values = arrayRemoveNulls(array(\"ALL\", distinctManagementZone))","multiple":true,"defaultValue":["ACTIVE_DIRECTORY","ALFRESCO_APAC","CITRIX","EXCHANGE","GCMS_UK","GXB_UK","IMAGERIGHT_US","MICROSOFTSQL_TEST","MULE_APAC","MyRPS_US","ORBIT_UK"]}],"tiles":{"0":{"type":"data","title":"","query":"fetch dt.entity.host\n| fields managementZones\n| append [ fetch dt.entity.service\n         | fields id,managementZones\n         ]\n| append [ fetch dt.entity.application\n         | fields id, managementZones\n         ]\n| append [ fetch dt.entity.mobile_application\n         | fields id, managementZones\n         ]   \n| append [ fetch dt.entity.custom_application\n         | fields id, managementZones\n         ]   \n| append [ fetch dt.entity.synthetic_test\n         | fields id, managementZones\n         ]   \n| append [ fetch dt.entity.http_check\n         | fields id, managementZones\n         ] \n\n| append [ fetch dt.entity.process_group\n         | fields id, managementZones\n         ] \n\n| append [ fetch dt.entity.process_group_instance\n         | fields id, managementZones\n         ]  \n         \n| append [ fetch dt.entity.host\n         | fields id, managementZones\n         ]  \n| append [ fetch dt.entity.cloud_application\n         | fields id, managementZones\n         ]  \n| append [ fetch dt.entity.kubernetes_cluster\n         | fields id, managementZones\n         ]  \n\n| append [ fetch dt.entity.custom_device\n         | fields id, managementZones\n         ]  \n| append [ fetch dt.entity.hypervisor\n         | fields id, managementZones\n         ]  \n| expand managementZones\n| filter isNotNull(managementZones)\n| filter matchesPhrase(managementZones, \"_US\")\n| join [fetch events, from:now()-24h, to:now()\n| filter event.kind == \"DAVIS_PROBLEM\"\n| expand affected_entity_ids\n| sort timestamp, direction:\"ascending\"\n| summarize {event.status = takeLast(event.status)}, by:{affected_entity_ids}\n| filter event.status == \"ACTIVE\"],\n    kind: leftOuter,\n    on: {left[id] == right[affected_entity_ids] },\n    fields: { event.status,affected_entity_ids}\n| summarize Status = collectDistinct(event.status), by:{managementZones}\n| sort managementZones asc\n| fields Application = managementZones, Status = if(matchesPhrase(Status, \"ACTIVE\"), \"ðŸ”´ Unhealthy\", else:\" ðŸŸ¢ Healthy\")","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"table","visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"categoricalBarChartSettings":{}},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","recordField":"managementZones","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"comfortable","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"columnWidths":{}},"honeycomb":{"shape":"hexagon","legend":"auto","dataMappings":{"category":"Application","value":"Status"}},"histogram":{"dataMappings":[]}}},"1":{"type":"markdown","title":"","content":"## North America"},"2":{"type":"markdown","title":"","content":"## EMEA"},"3":{"type":"data","title":"","query":"fetch dt.entity.host\n| fields managementZones\n| append [ fetch dt.entity.service\n         | fields id,managementZones\n         ]\n| append [ fetch dt.entity.application\n         | fields id, managementZones\n         ]\n| append [ fetch dt.entity.mobile_application\n         | fields id, managementZones\n         ]   \n| append [ fetch dt.entity.custom_application\n         | fields id, managementZones\n         ]   \n| append [ fetch dt.entity.synthetic_test\n         | fields id, managementZones\n         ]   \n| append [ fetch dt.entity.http_check\n         | fields id, managementZones\n         ] \n\n| append [ fetch dt.entity.process_group\n         | fields id, managementZones\n         ] \n\n| append [ fetch dt.entity.process_group_instance\n         | fields id, managementZones\n         ]  \n         \n| append [ fetch dt.entity.host\n         | fields id, managementZones\n         ]  \n| append [ fetch dt.entity.cloud_application\n         | fields id, managementZones\n         ]  \n| append [ fetch dt.entity.kubernetes_cluster\n         | fields id, managementZones\n         ]  \n\n| append [ fetch dt.entity.custom_device\n         | fields id, managementZones\n         ]  \n| append [ fetch dt.entity.hypervisor\n         | fields id, managementZones\n         ]  \n| expand managementZones\n| filter isNotNull(managementZones)\n| filter matchesPhrase(managementZones, \"_UK\")\n| join [fetch events, from:now()-24h, to:now()\n| filter event.kind == \"DAVIS_PROBLEM\"\n| expand affected_entity_ids\n| sort timestamp, direction:\"ascending\"\n| summarize {event.status = takeLast(event.status)}, by:{affected_entity_ids}\n| filter event.status == \"ACTIVE\"],\n    kind: leftOuter,\n    on: {left[id] == right[affected_entity_ids] },\n    fields: { event.status,affected_entity_ids}\n| summarize Status = collectDistinct(event.status), by:{managementZones}\n| sort managementZones asc\n| fields Application = managementZones, Status = if(matchesPhrase(Status, \"ACTIVE\"), \"ðŸ”´ Unhealthy\", else:\" ðŸŸ¢ Healthy\")","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"table","visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"categoricalBarChartSettings":{}},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","recordField":"managementZones","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"comfortable","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"columnWidths":{}},"honeycomb":{"shape":"hexagon","legend":"auto","dataMappings":{"category":"Application","value":"Status"}},"histogram":{"dataMappings":[]}}},"4":{"type":"markdown","title":"","content":"## APAC"},"5":{"type":"data","title":"","query":"fetch dt.entity.host\n| fields managementZones\n| append [ fetch dt.entity.service\n         | fields id,managementZones\n         ]\n| append [ fetch dt.entity.application\n         | fields id, managementZones\n         ]\n| append [ fetch dt.entity.mobile_application\n         | fields id, managementZones\n         ]   \n| append [ fetch dt.entity.custom_application\n         | fields id, managementZones\n         ]   \n| append [ fetch dt.entity.synthetic_test\n         | fields id, managementZones\n         ]   \n| append [ fetch dt.entity.http_check\n         | fields id, managementZones\n         ] \n\n| append [ fetch dt.entity.process_group\n         | fields id, managementZones\n         ] \n\n| append [ fetch dt.entity.process_group_instance\n         | fields id, managementZones\n         ]  \n         \n| append [ fetch dt.entity.host\n         | fields id, managementZones\n         ]  \n| append [ fetch dt.entity.cloud_application\n         | fields id, managementZones\n         ]  \n| append [ fetch dt.entity.kubernetes_cluster\n         | fields id, managementZones\n         ]  \n\n| append [ fetch dt.entity.custom_device\n         | fields id, managementZones\n         ]  \n| append [ fetch dt.entity.hypervisor\n         | fields id, managementZones\n         ]  \n| expand managementZones\n| filter isNotNull(managementZones)\n| filter matchesPhrase(managementZones, \"_APAC\")\n| join [fetch events, from:now()-24h, to:now()\n| filter event.kind == \"DAVIS_PROBLEM\"\n| expand affected_entity_ids\n| sort timestamp, direction:\"ascending\"\n| summarize {event.status = takeLast(event.status)}, by:{affected_entity_ids}\n| filter event.status == \"ACTIVE\"],\n    kind: leftOuter,\n    on: {left[id] == right[affected_entity_ids] },\n    fields: { event.status,affected_entity_ids}\n| summarize Status = collectDistinct(event.status), by:{managementZones}\n| sort managementZones asc\n| fields Application = managementZones, Status = if(matchesPhrase(Status, \"ACTIVE\"), \"ðŸ”´ Unhealthy\", else:\" ðŸŸ¢ Healthy\")","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"table","visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"categoricalBarChartSettings":{}},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","recordField":"managementZones","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"comfortable","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"columnWidths":{}},"honeycomb":{"shape":"hexagon","legend":"auto","dataMappings":{"category":"Application","value":"Status"}},"histogram":{"dataMappings":[]}}},"6":{"type":"markdown","title":"","content":"## Shared Services"},"7":{"type":"data","title":"","query":"fetch dt.entity.host\n| fields managementZones\n| append [ fetch dt.entity.service\n         | fields id,managementZones\n         ]\n| append [ fetch dt.entity.application\n         | fields id, managementZones\n         ]\n| append [ fetch dt.entity.mobile_application\n         | fields id, managementZones\n         ]   \n| append [ fetch dt.entity.custom_application\n         | fields id, managementZones\n         ]   \n| append [ fetch dt.entity.synthetic_test\n         | fields id, managementZones\n         ]   \n| append [ fetch dt.entity.http_check\n         | fields id, managementZones\n         ] \n\n| append [ fetch dt.entity.process_group\n         | fields id, managementZones\n         ] \n\n| append [ fetch dt.entity.process_group_instance\n         | fields id, managementZones\n         ]  \n         \n| append [ fetch dt.entity.host\n         | fields id, managementZones\n         ]  \n| append [ fetch dt.entity.cloud_application\n         | fields id, managementZones\n         ]  \n| append [ fetch dt.entity.kubernetes_cluster\n         | fields id, managementZones\n         ]  \n| append [ fetch dt.entity.custom_device\n         | fields id, managementZones\n         ]  \n| append [ fetch dt.entity.hypervisor\n         | fields id, managementZones\n         ]  \n| expand managementZones\n| filter isNotNull(managementZones)\n| filter not matchesPhrase(managementZones, \"_US\") and \n         not matchesPhrase(managementZones, \"_UK\") and\n         not matchesPhrase(managementZones, \"_APAC\") //and\n      //   not matchesPhrase(managementZones, \"_TEST\") \n| join [fetch events, from:now()-24h, to:now()\n| filter event.kind == \"DAVIS_PROBLEM\"\n| expand affected_entity_ids\n| sort timestamp, direction:\"ascending\"\n| summarize {event.status = takeLast(event.status)}, by:{affected_entity_ids}\n| filter event.status == \"ACTIVE\"],\n    kind: leftOuter,\n    on: {left[id] == right[affected_entity_ids] },\n    fields: { event.status,affected_entity_ids}\n| summarize Status = collectDistinct(event.status), by:{managementZones}\n| sort managementZones asc\n| fields Application = managementZones, \n         Status = if(matchesPhrase(Status, \"ACTIVE\"), \"ðŸ”´ Unhealthy\", else:\" ðŸŸ¢ Healthy\")","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"table","visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"categoricalBarChartSettings":{}},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","recordField":"managementZones","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"comfortable","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"columnWidths":{}},"honeycomb":{"shape":"hexagon","legend":"auto","dataMappings":{"category":"Application","value":"Status"}},"histogram":{"dataMappings":[]}}},"8":{"type":"data","title":"","query":"fetch events\n| filter event.kind == \"DAVIS_PROBLEM\"\n| sort timestamp desc\n\n// ManagmentZone Filter Start\n| expand affected_entity_ids\n| lookup [fetch dt.entity.application | fields name=entity.name, id=id, mz=managementZones], sourceField:affected_entity_ids, lookupField:id, prefix:\"lookup.affected.entity.application\"\n| lookup [fetch dt.entity.mobile_application | fields name=entity.name, id=id, mz=managementZones], sourceField:affected_entity_ids, lookupField:id, prefix:\"lookup.affected.entity.mobile\"\n| lookup [fetch dt.entity.custom_application | fields name=entity.name, id=id, mz=managementZones], sourceField:affected_entity_ids, lookupField:id, prefix:\"lookup.affected.entity.custom\"\n| lookup [fetch dt.entity.synthetic_test | fields name=entity.name, id=id, mz=managementZones], sourceField:affected_entity_ids, lookupField:id, prefix:\"lookup.affected.entity.synthetictest\"\n| lookup [fetch dt.entity.http_check | fields name=entity.name, id=id, mz=managementZones], sourceField:affected_entity_ids, lookupField:id, prefix:\"lookup.affected.entity.httpcheck\"\n| lookup [fetch dt.entity.process_group | fields name=entity.name, id=id, mz=managementZones], sourceField:affected_entity_ids, lookupField:id, prefix:\"lookup.affected.entity.pg\"\n| lookup [fetch dt.entity.process_group_instanc | fields name=entity.name, id=id, mz=managementZones], sourceField:affected_entity_ids, lookupField:id, prefix:\"lookup.affected.entity.pgi\"\n| lookup [fetch dt.entity.service | fields name=entity.name, id=id, mz=managementZones], sourceField:affected_entity_ids, lookupField:id, prefix:\"lookup.affected.entity.service\"\n| lookup [fetch dt.entity.host | fields name=entity.name, id=id, mz=managementZones], sourceField:affected_entity_ids, lookupField:id, prefix:\"lookup.affected.entity.host\"\n| lookup [fetch dt.entity.custom_device | fields name=entity.name, id=id, mz=managementZones], sourceField:affected_entity_ids, lookupField:id, prefix:\"lookup.affected.entity.customdevice\"\n| lookup [fetch dt.entity.cloud_application | fields name=entity.name, id=id, mz=managementZones], sourceField:affected_entity_ids, lookupField:id, prefix:\"lookup.affected.entity.cloud_app\"\n| lookup [fetch dt.entity.kubernetes_cluster | fields name=entity.name, id=id, mz=managementZones], sourceField:affected_entity_ids, lookupField:id, prefix:\"lookup.affected.entity.k8scluser\"\n| lookup [fetch dt.entity.hypervisor | fields name=entity.name, id=id, mz=managementZones], sourceField:affected_entity_ids, lookupField:id, prefix:\"lookup.affected.entity.hypervisor\"\n\n| filter in(lookup.affected.entity.applicationmz,$Application) or\n         in(lookup.affected.entity.mobilemz,$Application) or\n         in(lookup.affected.entity.custommz,$Application) or\n         in(lookup.affected.entity.synthetictestmz,$Application) or\n         in(lookup.affected.entity.httpcheckmz,$Application) or\n         in(lookup.affected.entity.pgmz,$Application) or \n         in(lookup.affected.entity.pgimz,$Application) or \n         in(lookup.affected.entity.servicemz,$Application) or\n         in(lookup.affected.entity.hostmz,$Application) or\n         in(lookup.affected.entity.customdevicemz,$Application) or\n         in(lookup.affected.entity.cloud_appmz,$Application) or\n         in(lookup.affected.entity.k8sclustermz,$Application) or\n         in(lookup.affected.entity.hypervisormz,$Application)\n// ManagmentZone Filter End\n\n// Lookup for affected_entity_ids and root_cause_entity_id Start\n| expand affected_entity_ids\n| expand root_cause_entity_id\n| lookup [fetch dt.entity.service], sourceField:affected_entity_ids, lookupField: id, prefix:\"lookup.affected.entity.services\"\n| lookup [fetch dt.entity.service], sourceField:root_cause_entity_id, lookupField: id, prefix:\"lookup.rootcause.entity.services\"\n| lookup [fetch dt.entity.process_group_instance], sourceField:affected_entity_ids, lookupField: id, prefix:\"lookup.affected.entity.pgi\"\n| lookup [fetch dt.entity.process_group_instance], sourceField:root_cause_entity_id, lookupField: id, prefix:\"lookup.rootcause.entity.pgi\"\n| lookup [fetch dt.entity.application], sourceField:affected_entity_ids, lookupField: id, prefix:\"lookup.affected.entity.applications\"\n| lookup [fetch dt.entity.application], sourceField:root_cause_entity_id, lookupField: id, prefix:\"lookup.rootcause.entity.applications\"\n| lookup [fetch dt.entity.mobile_application], sourceField:affected_entity_ids, lookupField: id, prefix:\"lookup.affected.entity.mobile\"\n| lookup [fetch dt.entity.mobile_application], sourceField:root_cause_entity_id, lookupField: id, prefix:\"lookup.rootcause.entity.mobile\"\n| lookup [fetch dt.entity.custom_application], sourceField:affected_entity_ids, lookupField: id, prefix:\"lookup.affected.entity.customapplication\"\n| lookup [fetch dt.entity.custom_application], sourceField:root_cause_entity_id, lookupField: id, prefix:\"lookup.rootcause.entity.customapplication\"\n| lookup [fetch dt.entity.cloud_application], sourceField:affected_entity_ids, lookupField: id, prefix:\"lookup.affected.entity.cloudapplication\"\n| lookup [fetch dt.entity.cloud_application], sourceField:root_cause_entity_id, lookupField: id, prefix:\"lookup.rootcause.entity.cloudapplication\"\n| lookup [fetch dt.entity.synthetic_test], sourceField:affected_entity_ids, lookupField: id, prefix:\"lookup.affected.entity.synthetictest\"\n| lookup [fetch dt.entity.synthetic_test], sourceField:root_cause_entity_id, lookupField: id, prefix:\"lookup.rootcause.entity.synthetictest\"\n| lookup [fetch dt.entity.http_check], sourceField:affected_entity_ids, lookupField: id, prefix:\"lookup.affected.entity.httpcheck\"\n| lookup [fetch dt.entity.http_check], sourceField:root_cause_entity_id, lookupField: id, prefix:\"lookup.rootcause.entity.httpcheck\"\n| lookup [fetch dt.entity.kubernetes_cluster], sourceField:affected_entity_ids, lookupField: id, prefix:\"lookup.affected.entity.kubernetescluster\"\n| lookup [fetch dt.entity.kubernetes_cluster], sourceField:root_cause_entity_id, lookupField: id, prefix:\"lookup.rootcause.entity.kubernetescluster\"\n| lookup [fetch dt.entity.host], sourceField:affected_entity_ids, lookupField: id, prefix:\"lookup.affected.entity.hosts\"\n| lookup [fetch dt.entity.host], sourceField:root_cause_entity_id, lookupField: id, prefix:\"lookup.rootcause.entity.hosts\"\n| lookup [fetch dt.entity.custom_device], sourceField:affected_entity_ids, lookupField: id, prefix:\"lookup.affected.entity.customdevices\"\n| lookup [fetch dt.entity.custom_device], sourceField:root_cause_entity_id, lookupField: id, prefix:\"lookup.rootcause.entity.customdevices\"\n| lookup [fetch dt.entity.hypervisor], sourceField:affected_entity_ids, lookupField: id, prefix:\"lookup.affected.entity.hypervisor\"\n| lookup [fetch dt.entity.hypervisor], sourceField:root_cause_entity_id, lookupField: id, prefix:\"lookup.rootcause.entity.hypervisor\"\n| lookup [fetch dt.entity.environment], sourceField:affected_entity_ids, lookupField: id, prefix:\"lookup.affected.entity.environment\"\n// Lookup for affected_entity_ids and root_cause_entity_id End\n\n// Summarzation Start - Group Probem Events by Problem ID\n| summarize {startTime = takeFirst(event.start),\n            endTime = takeFirst(event.end),\n            problemClosedDuration = takeFirst(resolved_problem_duration),\n            status = takeFirst(event.status),\n            event.name = takeFirst(event.name),\n            severityLevel = takeFirst(event.category),\n            affected = takeFirst(affected_entity_ids),\n            rootCause = takeFirst(root_cause_entity_id),\n            dt.davis.is_duplicate = takeFirst(dt.davis.is_duplicate),\n            affectedServices = collectDistinct(lookup.affected.entity.servicesentity.name),\n            affectedPGI = collectDistinct(lookup.affected.entity.pgientity.name),\n            affectedApplications = collectDistinct(lookup.affected.entity.applicationsentity.name),\n            affectedMobile = collectDistinct(lookup.affected.entity.mobileentity.name),\n            affectedCustomApplication = collectDistinct(lookup.affected.entity.customapplicationentity.name),\n            affectedCloudApplication = collectDistinct(lookup.affected.entity.cloudapplicationentity.name),\n            affectedSyntheticTest = collectDistinct(lookup.affected.entity.synthetictestentity.name),\n            affectedHttpCheck = collectDistinct(lookup.affected.entity.httpcheckentity.name),\n            affectedKubernetesCluster = collectDistinct(lookup.affected.entity.kubernetesclusterentity.name),\n            affectedHosts = collectDistinct(lookup.affected.entity.hostsentity.name),\n            affectedCustomDevices = collectDistinct(lookup.affected.entity.customdevicesentity.name),\n            affectedHypervisor = collectDistinct(lookup.affected.entity.hypervisorentity.name),\n            affectedEnvironment = collectDistinct(lookup.affected.entity.environmententity.name),\n            rootCauseServices = collectDistinct(lookup.rootcause.entity.servicesentity.name),\n            rootCausePGI = collectDistinct(lookup.rootcause.entity.pgientity.name),\n            rootCauseApplications = collectDistinct(lookup.rootcause.entity.applicationsentity.name),\n            rootCauseMobile = collectDistinct(lookup.rootcause.entity.mobileentity.name),\n            rootCauseCustomApplication = collectDistinct(lookup.rootcause.entity.customapplicationentity.name),\n            rootCauseSyntheticTest = collectDistinct(lookup.rootcause.entity.synthetictestentity.name),\n            rootCauseHttpCheck = collectDistinct(lookup.rootcause.entity.httpcheckentity.name),\n            rootCauseHosts = collectDistinct(lookup.rootcause.entity.hostsentity.name),\n            rootCauseCustomDevices = collectDistinct(lookup.rootcause.entity.customdevicesentity.name),\n            managementzoneService = takefirst(lookup.affected.entity.servicemz),\n            managementzoneHost= takefirst(lookup.affected.entity.hostmz),\n //           managementzoneHTTPCheck= takefirst(lookup.affected.entity.httpcheckmz),\n            event.id = takeFirst(event.id)}, \n            by:{display_id}\n| filter `dt.davis.is_duplicate` == false\n| fieldsAdd currentTime = toTimestamp(now())\n| fieldsAdd status = if((status == \"ACTIVE\"),\"OPEN\", \n                else:if((status == \"CLOSED\"), \"CLOSED\"))\n// Summarzation End - Group Probem Events by Problem ID\n\n// Dashboard Fitlers Start\n\n// Dashboard Fitlers End\n| filter status == \"OPEN\"\n// Final Result Start\n| fields Status = if((status == \"OPEN\"),\"ðŸ”´ OPEN\", \n                  else:if((status == \"CLOSED\"),\"ðŸŸ¢ CLOSED\")),\n         Problem = concat(display_id,\" - \",event.name),         \n         Application = arrayRemoveNulls(arrayConcat(managementzoneService,managementzoneHost)),\n         Severity = severityLevel,\n         Type = (event.name),\n         AffectedCount = arraySize(arrayRemoveNulls(arrayConcat(affectedApplications,affectedMobile,affectedCustomApplication,affectedCloudApplication,affectedSyntheticTest,affectedHttpCheck,affectedServices,affectedPGI,affectedKubernetesCluster,affectedHosts,affectedHypervisor,affectedCustomDevices,affectedEnvironment))),\n         Affected = arrayRemoveNulls(arrayConcat(affectedApplications,affectedMobile,affectedCustomApplication,affectedCloudApplication,affectedSyntheticTest,affectedHttpCheck,affectedServices,affectedPGI,affectedKubernetesCluster,affectedHosts,affectedHypervisor,affectedCustomDevices,affectedEnvironment)),\n         RootCause = arrayRemoveNulls(arrayConcat(rootCauseServices,rootCauseHosts)),\n         StartTime = startTime,\n         EndTime =  if((status == \"OPEN\"),\"In Progress\", \n                    else:if((status == \"CLOSED\"),endTime)),   \n         Duration = if((status == \"CLOSED\"),problemClosedDuration,\n                    else:if((status == \"OPEN\"), currentTime-startTime)),\n\n      //   `Duration (min)` = if((status == \"CLOSED\"),problemClosedDuration/60000000000,\n      //             else:if((status == \"OPEN\"), toLong(currentTime-startTime)/60000000000)),\n      \n         \n         event.id           \n| sort StartTime, direction:\"descending\"\n| sort Status, direction:\"ascending\"\n// Final Result End\n\n","davis":{"enabled":false,"davisVisualization":{"isAvailable":true}},"visualization":"table","visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"categoricalBarChartSettings":{"categoryAxis":"Status","categoryAxisLabel":"Status","valueAxis":"AffectedCount","valueAxisLabel":"AffectedCount"},"hiddenLegendFields":[],"fieldMapping":{"timestamp":"StartTime","leftAxisValues":["AffectedCount"],"leftAxisDimensions":["Status"]}},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","recordField":"Status","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"default","enableSparklines":false,"hiddenColumns":[["AffectedCount"],["Severity"],["RootCause"]],"lineWrapIds":[],"columnWidths":{}},"honeycomb":{"shape":"hexagon","legend":"auto","dataMappings":{"category":"Status","value":"Problem"}},"histogram":{"dataMappings":[{"valueAxis":"AffectedCount","rangeAxis":""},{"valueAxis":"Duration","rangeAxis":""}]}}},"9":{"type":"markdown","title":"","content":"## Open Problems"}},"layouts":{"0":{"x":0,"y":1,"w":6,"h":6},"1":{"x":0,"y":0,"w":5,"h":1},"2":{"x":6,"y":0,"w":6,"h":1},"3":{"x":6,"y":1,"w":6,"h":6},"4":{"x":12,"y":0,"w":6,"h":1},"5":{"x":12,"y":1,"w":6,"h":6},"6":{"x":18,"y":0,"w":6,"h":1},"7":{"x":18,"y":1,"w":6,"h":6},"8":{"x":0,"y":8,"w":24,"h":6},"9":{"x":0,"y":7,"w":24,"h":1}},"importedWithCode":false}